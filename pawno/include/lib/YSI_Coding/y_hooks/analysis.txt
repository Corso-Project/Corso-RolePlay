An analysis of the new "y_hooks" library.







Call Order.

In the old version of y_hooks, ALS hook functions came after y_hooks functions.
If this was your mode:

[pawn]
// First hook.
public OnPlayerConnect(playerid)
{
	printf("ALS");
	#if defined My_OnPlayerConnect
		My_OnPlayerConnect(playerid);
	#endif
	return 1;
}

#if defined My_OnPlayerConnect
	forward My_OnPlayerConnect(playerid);
#endif
#if defined _ALS_OnPlayerConnect
	#undef OnPlayerConnect
#else
	#define _ALS_OnPlayerConnect
#endif
#define OnPlayerConnect My_OnPlayerConnect

// Second hook.
hook OnPlayerConnect(playerid)
{
	printf("y_hooks");
	return 1;
}

// Main callback.
public OnPlayerConnect(playerid)
{
	printf("public");
	return 1;
}
[/pawn]

The output would be:

[code]
y_hooks
ALS
public
[/code]

This was changed in the latest version of y_hooks to call ALS functions before
y_hooks functions.  Thus making the output order:

[code]
ALS
public
y_hooks
[/code]

Unfortunately, there are several issues involved that make neither of these
correct:

1) ALS functions are resolved at compile-time.  The chaining is (with modern ALS
methods) resolved to just a standard function call.  This makes interrupting the
chain of functions virtually impossible - if we want to insert a function call
BETWEEN ALS hooks and the main public dynamically, we can't.

2) YSI uses ALS internally.  It has to to make regular hooks work, and to set up
some information before any hooks even exist.

3) In the old version of y_hooks, all hookable functions were explicitly
included in one huge file.  This meant that we could, at compile-time, insert
y_hooks functions in to the correct place in the function call chain.  It would
thus look like:

[code]
YSI ALS functions
y_hooks functions
Other ALS functions
public function
[/code]

4) The new version of y_hooks doesn't use an explicit list - the downsides to
doing that were that only functions added to the include could be hooked, and
the implementation was just one vast function of very repetative code.  Instead,
it generates hook code at run-time.  The downside to this is that, as previously
mentioned, it can't insert code between two functions in an ALS call chain.
There is no way, just using standard ALS, to have YSI's ALS functions get called
before y_hooks functions, and then have other ALS functions and the main public
get called after.

5) Further complicating the matter is "fixes.inc" - this must ALWAYS come first
in any hook call chain, and uses a very strict variant of ALS to enforce this at
compile-time.  Of course, this enforcing can be ignored by replacing function
calls at run-time.  "fixes.inc" is designed to be entirely independent of any
other library, and so can't be made y_hooks aware, instead we need to make
y_hooks "fixes.inc" aware.

So to summarise, the ideal call chain we want for any given callback is:

[code]
fixes.inc
YSI ALS
y_hooks
Other ALS
public
[/code]

That order will cover the widest number of cases correctly.  But as we have
already said, the code for y_hooks functions is generated at run-time, and we
can't insert dynamic code in to the middle of an ALS call chain that already
looks like this:

[code]
fixes.inc
YSI ALS
Other ALS
public
[/code]

So why not put y_hooks functions first?  Simple, many will rely on YSI code that
will not have been initialised until the correct YSI ALS function has been
called (think "foreach").  Instead, they are for now run last.  The only other
solution is to invent a new hook method and replace "fixes.inc" and "YSI ALS"
with it to break the solid ALS chain.  This is what I am trying to do now...
But we again run in to a problem with "fixes.inc" - it must remain library
agnostic, so this new pre-y_hooks compatible hook method must keep working even
when y_hooks is not in use, and must be fast with it.

Making the YSI ALS hooks y_hooks compatible is relatively trivial, because they
are already part of YSI.  I'm thinking about using states for "fixes.inc" ALS,
but we will see if I can get it working.


